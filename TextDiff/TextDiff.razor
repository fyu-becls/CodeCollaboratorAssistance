@using DiffPlex.DiffBuilder;
@using DiffPlex.DiffBuilder.Model;
@inject IJSRuntime JSRuntime
@inject ISideBySideDiffBuilder sideBySide
@inject BrowserService BrowserService


<div class="diff-container">
    <div class="diff-header">
        @Header(new DiffStats(diff))
    </div>
    <CascadingValue Value="ShowWhiteSpace" Name="ShowWhiteSpace">
        <CascadingValue Value="CollapseContent" Name="CollapseContent">
            <div class="diff-panes" @ref="pane" style="@(CollapseContent ? $"max-height: {MaxHeight}px; height: {MaxHeight}px; overflow-y: scroll;" : "max-height: auto; overflow: auto;")">
                @*<div class="diff-pane">
                    <TextDiffPane Model="diff.OldText" PanePosition="@PanePosition.Left"></TextDiffPane>
                </div>
                <div class="diff-pane">
                    <TextDiffPane Model="diff.NewText" PanePosition="@PanePosition.Right"></TextDiffPane>
                </div>*@
                <div class="diff-pane">
                    <TextDiffPanes Model="diff"></TextDiffPanes>
                </div>
            </div>
        </CascadingValue>
    </CascadingValue>
    @if (CollapseContent && paneHeight >= MaxHeight)
    {
        <p class="diff-expand-notice">...</p>
    }
</div>




@code {

    [Parameter]
    public bool ShowWhiteSpace { get; set; }

    [Parameter]
    public int MaxHeight { get; set; } = 300;

    [Parameter]
    public bool CollapseContent { get; set; }

    /// <summary>
    /// The text before any changes.
    /// </summary>
    [Parameter] public string OldText { get; set; }

    /// <summary>
    /// The text after any changes.
    /// </summary>
    [Parameter] public string NewText { get; set; }
    [Parameter] public RenderFragment<DiffStats> Header { get; set; }

    private SideBySideDiffModel diff;
    private ElementReference pane;
    private int paneHeight;


    /// <summary>
    /// When parameters set update the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        diff = sideBySide.BuildDiffModel(OldText, NewText);

        if(pane.Id != null)
        {
            paneHeight = await JSRuntime.InvokeAsync<int>("blazorTextDiff.getHeight", pane);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MaxHeight = (await BrowserService.GetDimensions()).Height - 200;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// When loaded try to diff if text available.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        if (pane.Id != null)
        {
            paneHeight = await JSRuntime.InvokeAsync<int>("blazorTextDiff.getHeight", pane);
        }
    }
}
